/*:
 ## Упражнение — Параметры и метки аргументов
 
 Напишите новую функцию `introduction`.  Она должна получать два строковых параметра типа `String`, под метками `name` (имя) и `home` (родной город), и один целочисленный параметр типа `Int`, `age` (возраст).  Функция должна вывести короткую информацию.  Например, если функции передать "Настя" "Суиндон, графство Уилтшир" и 17, она может напечатать «Настя, 17 лет, место рождения: Суиндон, графство Уилтшир».  Вызовите функцию несколько раз и зафиксируйте результаты.
 */
func introduction(_ name: String, _ home: String, _ age: Int) {
    print("\(name), \(age) лет, место рождения: \(home)")
}
introduction("Настя", "Суиндон, графство Уилтшир", 17)
introduction("Вася Пупкин", "Марс", 95)
/*:
 Напишите функцию `almostAddition`, которая принимает два аргумента `Int`.  Первый аргумент не должен требовать метки.  Функция должна сложить оба аргумента, вычесть 2, затем вывести результат.  Вызовите функцию с разными параметрами и зафиксируйте результаты.
 */
func almostAddition(_ firstParam: Int, secondParam: Int){
    let result = firstParam + secondParam - 2
    print(result)
}

almostAddition(11, secondParam: 7)
almostAddition(12, secondParam: 2)
almostAddition(13, secondParam: 3)

/*:
 Напишите функцию `multiply`, принимающую два аргумента `Double`.  Функция должна перемножить два аргумента и напечатать результат.  Первый аргумент не должен требовать метки, а второй аргумент должен иметь внешнюю метку, «by», которая будет отличаться от внутреннего названия переменной.  Вызовите функцию и зафиксируйте результаты её работы.
 */
func multiply(_ firstParam: Double, by secondParam: Double) -> Double{
    return firstParam * secondParam
}

var result = multiply(12.3, by: 3.6)
print(result)
//: [Ранее](@previous)  |  страница 3 из 6  |  [Далее: Упражнение для приложения — информирование об успехах](@next)
